name: CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

# 全局权限设置
permissions:
  contents: write

jobs:
  build-tauri:
    name: Build Tauri App
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install app dependencies
        run: npm install

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        with:
          # 不在这里创建 release，只构建
          includeRelease: false
          includeDebug: false

      - name: Debug - List build outputs
        shell: bash
        run: |
          echo "=== Current directory ==="
          pwd
          echo "=== Directory structure ==="
          find . -name "target" -type d | head -10
          echo "=== Looking for bundle directory ==="
          find . -name "bundle" -type d | head -10
          echo "=== Looking for release directory ==="
          find . -name "release" -type d | head -10
          echo "=== All files in src-tauri ==="
          ls -la src-tauri/ || echo "src-tauri directory not found"
          echo "=== All files in src-tauri/target if exists ==="
          ls -la src-tauri/target/ || echo "src-tauri/target directory not found"

      - name: Prepare release files (Windows)
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          mkdir -p release-files
          echo "Looking for Windows build artifacts..."
          
          # 查找构建产物的实际位置，排除 node_modules
          msi_files=$(find . -name "*.msi" -not -path "*/node_modules/*" | head -10)
          exe_files=$(find . -name "*.exe" -not -path "*/node_modules/*" -not -name "esbuild.exe" | head -10)
          echo "Found MSI files: $msi_files"
          echo "Found EXE files: $exe_files"
          
          # 复制找到的文件
          find . -name "*.msi" -not -path "*/node_modules/*" -exec cp {} release-files/ \; 2>/dev/null || echo "No MSI files found"
          find . -name "*.exe" -not -path "*/node_modules/*" -not -name "esbuild.exe" -exec cp {} release-files/ \; 2>/dev/null || echo "No EXE files found"
          
          echo "Files in release-files:"
          ls -la release-files/

      - name: Create Windows zip packages
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          cd release-files
          
          # 为 MSI 文件创建 zip 包
          Get-ChildItem -Filter "*.msi" | ForEach-Object {
            $zipName = "landrop-windows-$($_.BaseName).zip"
            Compress-Archive -Path $_.Name -DestinationPath $zipName -Force
            Write-Host "Created zip: $zipName"
          }
          
          # 为 EXE 文件创建 zip 包  
          Get-ChildItem -Filter "*.exe" | ForEach-Object {
            $zipName = "landrop-windows-$($_.BaseName).zip"
            Compress-Archive -Path $_.Name -DestinationPath $zipName -Force
            Write-Host "Created zip: $zipName"
          }
          
          # 显示最终的 zip 文件
          Write-Host "Final zip files:"
          Get-ChildItem -Filter "*.zip" | ForEach-Object { Write-Host $_.Name }

      - name: Prepare release files (macOS)
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          mkdir -p release-files
          echo "Looking for macOS build artifacts..."
          
          # 查找构建产物的实际位置
          app_files=$(find . -name "*.dmg" -o -name "*.app" | head -10)
          echo "Found files: $app_files"
          
          # 复制找到的文件
          find . -name "*.dmg" -exec cp {} release-files/ \; 2>/dev/null || echo "No DMG files found"
          find . -name "*.app" -exec cp -r {} release-files/ \; 2>/dev/null || echo "No APP files found"
          
          echo "Files in release-files:"
          ls -la release-files/
          
          # 创建 zip 包
          cd release-files
          if ls *.dmg >/dev/null 2>&1; then
            for file in *.dmg; do
              zip "landrop-macos-${file%.dmg}.zip" "$file"
              echo "Created zip for $file"
            done
          fi
          if ls *.app >/dev/null 2>&1; then
            for file in *.app; do
              zip -r "landrop-macos-${file%.app}.zip" "$file"
              echo "Created zip for $file"
            done
          fi
          
          echo "Final zip files:"
          ls -la *.zip || echo "No zip files created"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: landrop-${{ matrix.platform }}
          path: release-files/*.zip
          retention-days: 5
        # 即使没有 zip 文件也不要失败
        continue-on-error: true

  release:
    name: Create Release
    needs: build-tauri
    runs-on: ubuntu-latest
    permissions:
      contents: write
    # 只在推送标签时运行
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find . -name "*.zip" -ls || echo "No zip files found"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            landrop-*/*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
          name: "LanDrop ${{ github.ref_name }}"
          body: "查看 [CHANGELOG.md](https://github.com/zhoucq/landrop/blob/main/CHANGELOG.md) 获取详细信息。" 